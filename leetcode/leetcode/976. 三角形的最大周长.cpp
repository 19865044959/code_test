#include <vector>
#include <string>
#include <unordered_map>
#include <algorithm>

using namespace std;

/**********************************************************************************************************
方法：sort + 已知边长大小构成三角形条件

说明：

时间复杂度与空间复杂度：O(nlogn)   O(1) 

涉及到的知识点：已知a <= b <= c，那么构成三角形的充要条件为：c < a + b

***********************************************************************************************************/
class Solution {
public:
    int largestPerimeter(vector<int>& A) {
        int n = A.size();
        if (n == 0 || n == 1 || n == 2) return 0;
        sort(A.begin(), A.end());
        for (int i = n - 1; i >= 2; i--) {
            if (A[i - 1] + A[i - 2] > A[i]) return A[i] + A[i - 1] + A[i - 2];
        }
        return 0;
    }
};

/**********************************************************************************************************
方法：冒泡法从大到小排序

说明：不需要将所有的数据均排序，而是每次排完一个新元素之后，看看新元素与前面两个元素是否满足关系，
满足就返回，否则就不返回

时间复杂度与空间复杂度：O(n^2)-O(1)   O(1)

涉及到的知识点：冒泡源码

***********************************************************************************************************/
class Solution {
public:
    int largestPerimeter(vector<int>& A) {
        int n = A.size();
        if (n < 3) return 0;
        for (int i = 0; i < n; i++) { //这里注意，冒泡源码是i < n - 1，但如果这么做了，那么n - 1在下面if语句取不到了
            for (int j = n - 1; j > i; j--) {
                if (A[j - 1] < A[j]) swap(A[j - 1], A[j]); 
            }
            if (i >= 2 && A[i - 2] < A[i - 1] + A[i]) return A[i] + A[i - 1] + A[i - 2];
        }
        return 0;
    }
};